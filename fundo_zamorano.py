# -*- coding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#    Copyright (C) 2004-2010 Tiny SPRL (<http://tiny.be>).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################
# Generated by the OpenERP plugin for Dia !
from osv import fields,osv


class fundo(osv.osv):
    """Nombres  de  Fundos  Zamoranos"""
    _name = 'fundo'
    _rec_name = 'codigo'
    def _cod_fundo(self, cr, uid, ids, field_name, arg, context=None):
        res = {}
        for o in self.browse(cr, uid, ids, context=context):
		    res[o.id] = '%s-%s' % (o.estado_id.codigo ,o.nombre)
        return res
    
   # def mi_funcion(self, cr, uid, ids, algo, context=None):
    def _superf_fundo(self, cr, uid, ids, field_name, arg, context=None):
        res = {}
        arr = []
        for o in self.browse(cr, uid, ids, context=context):
            for w in o.superficie_ids:
                arr.append(w.tipo_id.nombre)
                for i in arr:
                    if arr.count(w.tipo_id.nombre)!=1:
                        raise osv.except_osv(('Error !'), ('haz seleccionado dos veces %s' % (w.tipo_id.nombre)))
        return  res
    _columns = {
        'control_superficie': fields.function(_superf_fundo, string='Personas Atendidas', type="char",size=100,  store=True),
        'codigo': fields.function(_cod_fundo, string='Cod. Fundo Zamorano', type="char",size=100, store=True),
        'nombre': fields.char('Nombre  del Fundo Zamorano', size=100, required=True , help='Nombre Completo el cual identifica el Fundo Zamorano. Ejem: General Manuel Manrique'),
        'direccion': fields.text('Direccion Practica', required=False, help='Se reflejara la dirección practica del Fundo Zamorano con punto  de  referencia'),
        'ppas_id': fields.many2one('ppas', 'Polo Patriotico Agrario Socialista', required=True, help='Se coloca el nombre del Polo Agrario Socialista que Pertenece el Fundo Zamorano (Antonio Ricaurte, Guillermo Ribas, Pedro Emilio Arevalo Cedeño, Las 3 Raices, Orlando Matheus,  Cimarron Andresote, Bolivar-Delta, Maisanta, Oriental, Ezequiel Zamora)  Ejem: Cimarrón Andresote. '),
        'redi_id': fields.many2one('redi', 'REDI', required=True, help='Nombrar la REDI la cual Fundo Zamorano pertenece (Central, Occidental, Los Llanos, Oriente, Marítima Insular, Guayana, Andina)'),
        'estado_id': fields.many2one('inces_estados', 'Estado', required=True, help='Se menciona el Nombre del Estado que se encuentra el Fundo Zamorano.'),
        'municipio_id': fields.many2one('inces_municipios', 'Municipio', help='Nombre del Municipio donde se encuentra el Fundo Zamorano'),
        'parroquia_id': fields.many2one('inces_parroquias', 'Parroquia', help='Parroquia la cual se encuentra el Fundo Zamorano. (Parroquia que sale establecida en instrumento agrario) '),
        'sector_id': fields.many2one('inces_sectores', 'Sector', help='Nombre del Sector donde esta ubicado el Fundo Zamorano (Sector que sale establecido en la carta agraria del Fundo Zamorano)'),
        'tipo_id': fields.many2one('tipo_fundo' ,'Tipo de  Fundo Zamorano', required=True, help='Tipo de Fundo Zamorano: Conuquero, Parceleros, Colectivo, Rescatado'),
        'superficie_ids': fields.one2many('superficie_fundo', 'superficie_id', 'Superficie del Fundo Zamorano', help='Relacion de Superficie  de  Fundos'),
        'estatus_id': fields.many2one('a_n', 'Estatus del Fundo', help='Estatus que posee el Fundo (Activo- No Activo)'),
        'naturalidad_ids': fields.one2many('naturalidad_fundo', 'fundo_naturalidad_id', 'Tipo de Población del Fundo Zamorano', help='Se colocara el Tipo de Población del Fundo Zamorano (Afrodecendientes, Criollo, Indígena)'),
        'estatus_nombre': fields.selection([('activo', 'Activo'), ('no_activo', 'No Activo')], 'Estatus', help="Se colocara el Estatus de Fundo Zamorano (Activo y No Activo).", required=True, states={'activo': [('readonly', False)]}),
        
    }
    _defaults = {
        'estatus_nombre': 'activo',
        
    }
fundo()

class ppas(osv.osv):
    """Polo Patriotico"""
    _name = 'ppas'
    _rec_name = 'nombre'
    #_rec_name = 'codigo'
    
    _columns = {
        'nombre': fields.char('Polo Patriotico Agrario Socialista', size=100, required=True, help='Nombre  del Polo Patriotico Agrario Socialista '),
        'codigo': fields.char('Codigo del Polo', size=50, required=True, help='Codigo  del Polo Patriotico Agrario Socialista'),
    }
    
ppas()

class redi(osv.osv):
    """Las Regiones Estratégicas de Desarrollo Integral (Redi)"""
    _name = 'redi'
    _rec_name = 'nombre'
    
    _columns = {
        'nombre': fields.char('REDI', size=50, required=True, help='Regiones Estratégicas de Desarrollo Integral (Redi)'),
    }
    
redi()

class inces_estados(osv.osv):
    """Tabla  de  Referencia  de  Estados"""
    _name = 'inces_estados'
    _rec_name = 'estado'
    #_rec_name = 'codigo'
    #_rec_name = 'redi_id'
    
    _columns = {
        'estado': fields.char('Estado', size=50, required=True, help='Nombre  del  Estado'),
        'codigo': fields.char('Codigo', size=3, required=True, help='Codigo  de  Identificacion del Estado'),
        'redi_id': fields.many2one('redi', 'REDI' , help='REDI a la  cual esta  relacionado el Estado'),
    }
    
inces_estados()

class inces_municipios(osv.osv):
    """Nombre de los Municipios"""
    _name = 'inces_municipios'
    _rec_name = 'municipio'
    #_rec_name = 'codigo'
    #_rec_name = 'estado_id'
    
    _columns = {
        'municipio': fields.char('Municipio', size=50, required=True, help='Nombre del  Municipio'),
        'codigo': fields.char('Codigo', size=3, required=True, help='Codigo del Municipio'),
        'estado_id': fields.many2one('inces_estados', 'Estado', help='Estado que  esta  asociado  al  Municipio'),
    }
    
inces_municipios()

class inces_parroquias(osv.osv):
    """Nombre  de la Parroquia"""
    _name = 'inces_parroquias'
    _rec_name = 'parroquia'
    #_rec_name = 'codigo'
    #_rec_name = 'municipio_id'
    
    _columns = {
        'parroquia': fields.char('Parroquia', size=50, required=True, help='Nombre  de la  Parroquia'),
        'codigo': fields.char('Codigo',size=3, required=True, help='Codigo de Identificacion de la Parroquia'),
        'municipio_id': fields.many2one('inces_municipios', 'Municipio', help='Municipio que  esta  relacionada a  la  Parroquia'),
    }
    
inces_parroquias()

class inces_sectores(osv.osv):
    """Nombre  de  Sectores"""
    _name = 'inces_sectores'
    _rec_name = 'sector'
    #_rec_name = 'codigo'
    #_rec_name = 'parroquia_id'
    
    _columns = {
        'sector': fields.char('Sector',size=50, required=True, help='Nombre del  Sector'),
        'codigo': fields.char('Codigo', size=3, required= True, help='Codigo del Sector'),
        'parroquia_id': fields.many2one('inces_parroquias', 'Parroquia', help='Parroquia  que  esta  asociado el  Sector'),
    }
    
inces_sectores()

class superficie_fundo(osv.osv):
    """Superficie  del  Fundo"""
    _name = 'superficie_fundo'
    #_rec_name = 'superficie_id'
    _rec_name = 'espacio'
    #_rec_name = 'observacion'
    #_rec_name = 'tipo_id'
	   
    _columns = {
        'superficie_id': fields.many2one('fundo', 'Superficie', help='Superficies del Fundo Zamorano'),
        'espacio': fields.char('Hectareas', size=30, required=True, help='se reflejara  las Hectáreas  de forma numérica que tiene El Fundo Zamorano '),
        'observacion': fields.char('Observación', size=250, required=False, help='Observación de  la  Superficie'),
        'tipo_id': fields.many2one('tipo_superficie', 'Tipo de Superficie', help='Se refleja el tipo de superficie (General, Aprovechable, Cultivable, Abrae)'),
    }
    
    def _check_unique_insesitive(self, cr, uid, ids, context=None):
        sr_ids = self.search(cr, 1 ,[], context=context)
        lst = [x.observacion.lower() for x in self.browse(cr, uid, sr_ids, context=context) if x.observacion and x.id not in ids]
        for self_obj in self.browse(cr, uid, ids, context=context):
            if self_obj.observacion and self_obj.observacion.lower() in  lst:
                return False
        return True
    _constraints = [(_check_unique_insesitive, 'La Palabra ya esta en la base datos', ['observacion'])]
    
    def action_superficie_fundo_create(self, cr, uid, ids, context=None):
	    return False
    
superficie_fundo()

class tipo_superficie(osv.osv):
    """Tipo de Superficie"""
    _name = 'tipo_superficie'
    _rec_name = 'nombre'
    
    _columns = {
        'nombre': fields.char('Tipo de  Superficie', size=100, required=True, help='Tipo de  Superficie (General, Aprovechable, Cultivable, Abrae)'),
    }
    
tipo_superficie()

class tipo_fundo(osv.osv):
    """Tipo de  Fundo"""
    _name = 'tipo_fundo'
    _rec_name = 'nombre'
    
    _columns = {
        'nombre': fields.char('Tipo de Fundo Zamorano', size=100, required=True, help='Tipo del Fundo'),
    }
    
tipo_fundo()

class naturalidad_fundo(osv.osv):
    """Registor de Naturalidad del Fundo"""
    _name = 'naturalidad_fundo'
    _rec_name = 'naturalidad_id'
    
    _columns = {
		'fundo_naturalidad_id': fields.many2one('fundo', 'Tipo de Población', help='Relacion del Tipo de Población del Fundo Zamorano'),
		'naturalidad_id': fields.many2one('naturalidad_fundo_tipo', 'Tipo de Población', help='Relacion del Tipo de Población del Fundo Zamorano'),
        
    }
    
naturalidad_fundo()

class naturalidad_fundo_tipo(osv.osv):
    """Registor de Naturalidad del Fundo"""
    _name = 'naturalidad_fundo_tipo'
    _rec_name = 'nombre'
    
    _columns = {
        'nombre': fields.char('Tipo de Población del Fundo Zamorano', size=50, required=True, help='Naturalidad que posee el Fundo'),
        
    }
    
naturalidad_fundo_tipo()

#ESTA TABLA QUEDA DESINCORPORADA Y NO VA SER UTILIZADA (ACCION REALIZADA POR REQUERIMIENTO DE LA COORDINACION
#DE LOS FUNDOS ZAMORANOS EN PETICION DE UN CORREO CON FECHA 26/08/2014 EN UN DOCUMENTOS LLAMADO (APORTES))
class tipo_naturalidad_fundo(osv.osv):
    """Registro de tipos de Naturalidad del Fundo"""
    _name = 'tipo_naturalidad_fundo'
    _rec_name = 'nombre'
    #_rec_name = 'naturalidad_id'
    
    _columns = {
        'nombre': fields.char('Tipo Naturalidad del Fundo Zamorano', size=50, required=True, help='Tipo de la Naturalidad que posee el Fundo'),
        'naturalidad_id': fields.many2one('naturalidad_fundo', 'Naturalidad', help='Relacion de la Naturalidad del Fundo'),
    }
    
tipo_naturalidad_fundo()
#Clase inutilizable
class a_n(osv.osv):
    """Configuracion del Estatus"""
    _name = 'a_n'
    _rec_name = 'nombre'
    
    _columns = {
        'nombre': fields.char('Estatus', size=30, required=True, help='Estaus que tiene el fundo (Activo-No Activo)'),
        
    }
    
a_n()

